// Code generated by MockGen. DO NOT EDIT.
// Source: signatures.go
//
// Generated by this command:
//
//	mockgen -typed -destination=source_mode/mock.go -package=source_mode -source=signatures.go
//

// Package source_mode is a generated GoMock package.
package source_mode

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSome is a mock of Some interface.
type MockSome struct {
	ctrl     *gomock.Controller
	recorder *MockSomeMockRecorder
	isgomock struct{}
}

// MockSomeMockRecorder is the mock recorder for MockSome.
type MockSomeMockRecorder struct {
	mock *MockSome
}

// NewMockSome creates a new mock instance.
func NewMockSome(ctrl *gomock.Controller) *MockSome {
	mock := &MockSome{ctrl: ctrl}
	mock.recorder = &MockSomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSome) EXPECT() *MockSomeMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSome) Execute() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSomeMockRecorder) Execute() *MockSomeExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSome)(nil).Execute))
	return &MockSomeExecuteCall{Call: call}
}

// MockSomeExecuteCall wrap *gomock.Call
type MockSomeExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSomeExecuteCall) Return(arg0 string) *MockSomeExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSomeExecuteCall) Do(f func() string) *MockSomeExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSomeExecuteCall) DoAndReturn(f func() string) *MockSomeExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGeneric is a mock of Generic interface.
type MockGeneric[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockGenericMockRecorder[T]
	isgomock struct{}
}

// MockGenericMockRecorder is the mock recorder for MockGeneric.
type MockGenericMockRecorder[T any] struct {
	mock *MockGeneric[T]
}

// NewMockGeneric creates a new mock instance.
func NewMockGeneric[T any](ctrl *gomock.Controller) *MockGeneric[T] {
	mock := &MockGeneric[T]{ctrl: ctrl}
	mock.recorder = &MockGenericMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneric[T]) EXPECT() *MockGenericMockRecorder[T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGeneric[T]) Execute(arg0 T) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockGenericMockRecorder[T]) Execute(arg0 any) *MockGenericExecuteCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGeneric[T])(nil).Execute), arg0)
	return &MockGenericExecuteCall[T]{Call: call}
}

// MockGenericExecuteCall wrap *gomock.Call
type MockGenericExecuteCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGenericExecuteCall[T]) Return(arg0 string) *MockGenericExecuteCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGenericExecuteCall[T]) Do(f func(T) string) *MockGenericExecuteCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGenericExecuteCall[T]) DoAndReturn(f func(T) string) *MockGenericExecuteCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWithMethod is a mock of WithMethod interface.
type MockWithMethod struct {
	ctrl     *gomock.Controller
	recorder *MockWithMethodMockRecorder
	isgomock struct{}
}

// MockWithMethodMockRecorder is the mock recorder for MockWithMethod.
type MockWithMethodMockRecorder struct {
	mock *MockWithMethod
}

// NewMockWithMethod creates a new mock instance.
func NewMockWithMethod(ctrl *gomock.Controller) *MockWithMethod {
	mock := &MockWithMethod{ctrl: ctrl}
	mock.recorder = &MockWithMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithMethod) EXPECT() *MockWithMethodMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockWithMethod) Execute(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockWithMethodMockRecorder) Execute(arg0 any) *MockWithMethodExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWithMethod)(nil).Execute), arg0)
	return &MockWithMethodExecuteCall{Call: call}
}

// MockWithMethodExecuteCall wrap *gomock.Call
type MockWithMethodExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWithMethodExecuteCall) Return(arg0 string) *MockWithMethodExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWithMethodExecuteCall) Do(f func(string) string) *MockWithMethodExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWithMethodExecuteCall) DoAndReturn(f func(string) string) *MockWithMethodExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
