// Code generated by MockGen. DO NOT EDIT.
// Source: iter (interfaces: Seq,Seq2)
//
// Generated by this command:
//
//	mockgen -typed -destination=package_mode/external_mock.go -package=package_mode iter Seq,Seq2
//

// Package package_mode is a generated GoMock package.
package package_mode

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSeq is a mock of Seq interface.
type MockSeq[V any] struct {
	ctrl     *gomock.Controller
	recorder *MockSeqMockRecorder[V]
	isgomock struct{}
}

// MockSeqMockRecorder is the mock recorder for MockSeq.
type MockSeqMockRecorder[V any] struct {
	mock *MockSeq[V]
}

// NewMockSeq creates a new mock instance.
func NewMockSeq[V any](ctrl *gomock.Controller) *MockSeq[V] {
	mock := &MockSeq[V]{ctrl: ctrl}
	mock.recorder = &MockSeqMockRecorder[V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeq[V]) EXPECT() *MockSeqMockRecorder[V] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSeq[V]) Execute(yield func(V) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", yield)
}

// Execute indicates an expected call of Execute.
func (mr *MockSeqMockRecorder[V]) Execute(yield any) *MockSeqExecuteCall[V] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSeq[V])(nil).Execute), yield)
	return &MockSeqExecuteCall[V]{Call: call}
}

// MockSeqExecuteCall wrap *gomock.Call
type MockSeqExecuteCall[V any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSeqExecuteCall[V]) Return() *MockSeqExecuteCall[V] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSeqExecuteCall[V]) Do(f func(func(V) bool)) *MockSeqExecuteCall[V] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSeqExecuteCall[V]) DoAndReturn(f func(func(V) bool)) *MockSeqExecuteCall[V] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSeq2 is a mock of Seq2 interface.
type MockSeq2[K any, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockSeq2MockRecorder[K, V]
	isgomock struct{}
}

// MockSeq2MockRecorder is the mock recorder for MockSeq2.
type MockSeq2MockRecorder[K any, V any] struct {
	mock *MockSeq2[K, V]
}

// NewMockSeq2 creates a new mock instance.
func NewMockSeq2[K any, V any](ctrl *gomock.Controller) *MockSeq2[K, V] {
	mock := &MockSeq2[K, V]{ctrl: ctrl}
	mock.recorder = &MockSeq2MockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeq2[K, V]) EXPECT() *MockSeq2MockRecorder[K, V] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSeq2[K, V]) Execute(yield func(K, V) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", yield)
}

// Execute indicates an expected call of Execute.
func (mr *MockSeq2MockRecorder[K, V]) Execute(yield any) *MockSeq2ExecuteCall[K, V] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSeq2[K, V])(nil).Execute), yield)
	return &MockSeq2ExecuteCall[K, V]{Call: call}
}

// MockSeq2ExecuteCall wrap *gomock.Call
type MockSeq2ExecuteCall[K any, V any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSeq2ExecuteCall[K, V]) Return() *MockSeq2ExecuteCall[K, V] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSeq2ExecuteCall[K, V]) Do(f func(func(K, V) bool)) *MockSeq2ExecuteCall[K, V] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSeq2ExecuteCall[K, V]) DoAndReturn(f func(func(K, V) bool)) *MockSeq2ExecuteCall[K, V] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
