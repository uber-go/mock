// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/mock/mockgen/internal/tests/signature (interfaces: Some,Some2,Alias,Generic,IntGeneric,WithMethod,IntIter)
//
// Generated by this command:
//
//	___funtions_package_mode -typed -destination=package_mode/mock.go -package=package_mode . Some,Some2,Alias,Generic,IntGeneric,WithMethod,IntIter
//

// Package package_mode is a generated GoMock package.
package package_mode

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSome is a mock of Some interface.
type MockSome struct {
	ctrl     *gomock.Controller
	recorder *MockSomeMockRecorder
	isgomock struct{}
}

// MockSomeMockRecorder is the mock recorder for MockSome.
type MockSomeMockRecorder struct {
	mock *MockSome
}

// NewMockSome creates a new mock instance.
func NewMockSome(ctrl *gomock.Controller) *MockSome {
	mock := &MockSome{ctrl: ctrl}
	mock.recorder = &MockSomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSome) EXPECT() *MockSomeMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSome) Execute() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSomeMockRecorder) Execute() *MockSomeExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSome)(nil).Execute))
	return &MockSomeExecuteCall{Call: call}
}

// MockSomeExecuteCall wrap *gomock.Call
type MockSomeExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSomeExecuteCall) Return(arg0 string) *MockSomeExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSomeExecuteCall) Do(f func() string) *MockSomeExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSomeExecuteCall) DoAndReturn(f func() string) *MockSomeExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSome2 is a mock of Some2 interface.
type MockSome2 struct {
	ctrl     *gomock.Controller
	recorder *MockSome2MockRecorder
	isgomock struct{}
}

// MockSome2MockRecorder is the mock recorder for MockSome2.
type MockSome2MockRecorder struct {
	mock *MockSome2
}

// NewMockSome2 creates a new mock instance.
func NewMockSome2(ctrl *gomock.Controller) *MockSome2 {
	mock := &MockSome2{ctrl: ctrl}
	mock.recorder = &MockSome2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSome2) EXPECT() *MockSome2MockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSome2) Execute() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSome2MockRecorder) Execute() *MockSome2ExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSome2)(nil).Execute))
	return &MockSome2ExecuteCall{Call: call}
}

// MockSome2ExecuteCall wrap *gomock.Call
type MockSome2ExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSome2ExecuteCall) Return(arg0 string) *MockSome2ExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSome2ExecuteCall) Do(f func() string) *MockSome2ExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSome2ExecuteCall) DoAndReturn(f func() string) *MockSome2ExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAlias is a mock of Alias interface.
type MockAlias struct {
	ctrl     *gomock.Controller
	recorder *MockAliasMockRecorder
	isgomock struct{}
}

// MockAliasMockRecorder is the mock recorder for MockAlias.
type MockAliasMockRecorder struct {
	mock *MockAlias
}

// NewMockAlias creates a new mock instance.
func NewMockAlias(ctrl *gomock.Controller) *MockAlias {
	mock := &MockAlias{ctrl: ctrl}
	mock.recorder = &MockAliasMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlias) EXPECT() *MockAliasMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAlias) Execute() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockAliasMockRecorder) Execute() *MockAliasExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAlias)(nil).Execute))
	return &MockAliasExecuteCall{Call: call}
}

// MockAliasExecuteCall wrap *gomock.Call
type MockAliasExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAliasExecuteCall) Return(arg0 string) *MockAliasExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAliasExecuteCall) Do(f func() string) *MockAliasExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAliasExecuteCall) DoAndReturn(f func() string) *MockAliasExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGeneric is a mock of Generic interface.
type MockGeneric[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockGenericMockRecorder[T]
	isgomock struct{}
}

// MockGenericMockRecorder is the mock recorder for MockGeneric.
type MockGenericMockRecorder[T any] struct {
	mock *MockGeneric[T]
}

// NewMockGeneric creates a new mock instance.
func NewMockGeneric[T any](ctrl *gomock.Controller) *MockGeneric[T] {
	mock := &MockGeneric[T]{ctrl: ctrl}
	mock.recorder = &MockGenericMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneric[T]) EXPECT() *MockGenericMockRecorder[T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGeneric[T]) Execute(arg0 T) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockGenericMockRecorder[T]) Execute(arg0 any) *MockGenericExecuteCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGeneric[T])(nil).Execute), arg0)
	return &MockGenericExecuteCall[T]{Call: call}
}

// MockGenericExecuteCall wrap *gomock.Call
type MockGenericExecuteCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGenericExecuteCall[T]) Return(arg0 string) *MockGenericExecuteCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGenericExecuteCall[T]) Do(f func(T) string) *MockGenericExecuteCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGenericExecuteCall[T]) DoAndReturn(f func(T) string) *MockGenericExecuteCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockIntGeneric is a mock of IntGeneric interface.
type MockIntGeneric struct {
	ctrl     *gomock.Controller
	recorder *MockIntGenericMockRecorder
	isgomock struct{}
}

// MockIntGenericMockRecorder is the mock recorder for MockIntGeneric.
type MockIntGenericMockRecorder struct {
	mock *MockIntGeneric
}

// NewMockIntGeneric creates a new mock instance.
func NewMockIntGeneric(ctrl *gomock.Controller) *MockIntGeneric {
	mock := &MockIntGeneric{ctrl: ctrl}
	mock.recorder = &MockIntGenericMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntGeneric) EXPECT() *MockIntGenericMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIntGeneric) Execute(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIntGenericMockRecorder) Execute(arg0 any) *MockIntGenericExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIntGeneric)(nil).Execute), arg0)
	return &MockIntGenericExecuteCall{Call: call}
}

// MockIntGenericExecuteCall wrap *gomock.Call
type MockIntGenericExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIntGenericExecuteCall) Return(arg0 string) *MockIntGenericExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIntGenericExecuteCall) Do(f func(int) string) *MockIntGenericExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIntGenericExecuteCall) DoAndReturn(f func(int) string) *MockIntGenericExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWithMethod is a mock of WithMethod interface.
type MockWithMethod struct {
	ctrl     *gomock.Controller
	recorder *MockWithMethodMockRecorder
	isgomock struct{}
}

// MockWithMethodMockRecorder is the mock recorder for MockWithMethod.
type MockWithMethodMockRecorder struct {
	mock *MockWithMethod
}

// NewMockWithMethod creates a new mock instance.
func NewMockWithMethod(ctrl *gomock.Controller) *MockWithMethod {
	mock := &MockWithMethod{ctrl: ctrl}
	mock.recorder = &MockWithMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithMethod) EXPECT() *MockWithMethodMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockWithMethod) Execute(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockWithMethodMockRecorder) Execute(arg0 any) *MockWithMethodExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWithMethod)(nil).Execute), arg0)
	return &MockWithMethodExecuteCall{Call: call}
}

// MockWithMethodExecuteCall wrap *gomock.Call
type MockWithMethodExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWithMethodExecuteCall) Return(arg0 string) *MockWithMethodExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWithMethodExecuteCall) Do(f func(string) string) *MockWithMethodExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWithMethodExecuteCall) DoAndReturn(f func(string) string) *MockWithMethodExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockIntIter is a mock of IntIter interface.
type MockIntIter struct {
	ctrl     *gomock.Controller
	recorder *MockIntIterMockRecorder
	isgomock struct{}
}

// MockIntIterMockRecorder is the mock recorder for MockIntIter.
type MockIntIterMockRecorder struct {
	mock *MockIntIter
}

// NewMockIntIter creates a new mock instance.
func NewMockIntIter(ctrl *gomock.Controller) *MockIntIter {
	mock := &MockIntIter{ctrl: ctrl}
	mock.recorder = &MockIntIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntIter) EXPECT() *MockIntIterMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIntIter) Execute(yield func(int) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", yield)
}

// Execute indicates an expected call of Execute.
func (mr *MockIntIterMockRecorder) Execute(yield any) *MockIntIterExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIntIter)(nil).Execute), yield)
	return &MockIntIterExecuteCall{Call: call}
}

// MockIntIterExecuteCall wrap *gomock.Call
type MockIntIterExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIntIterExecuteCall) Return() *MockIntIterExecuteCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIntIterExecuteCall) Do(f func(func(int) bool)) *MockIntIterExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIntIterExecuteCall) DoAndReturn(f func(func(int) bool)) *MockIntIterExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
