// Code generated by MockGen. DO NOT EDIT.
// Source: source.go
//
// Generated by this command:
//
//	mockgen -package import_aliased -destination source_mock.go -source=source.go -imports definitionAlias=context
//

// Package import_aliased is a generated GoMock package.
package import_aliased

import (
	definitionAlias "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockS is a mock of S interface.
type MockS struct {
	ctrl     *gomock.Controller
	recorder *MockSMockRecorder
	isgomock struct{}
}

// MockSMockRecorder is the mock recorder for MockS.
type MockSMockRecorder struct {
	mock *MockS
}

// NewMockS creates a new mock instance.
func NewMockS(ctrl *gomock.Controller) *MockS {
	mock := &MockS{ctrl: ctrl}
	mock.recorder = &MockSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS) EXPECT() *MockSMockRecorder {
	return m.recorder
}

// M mocks base method.
func (m *MockS) M(ctx definitionAlias.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "M", ctx)
}

// M indicates an expected call of M.
func (mr *MockSMockRecorder) M(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "M", reflect.TypeOf((*MockS)(nil).M), ctx)
}
