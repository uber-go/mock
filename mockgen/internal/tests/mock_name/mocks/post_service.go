// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/mock/mockgen/internal/tests/mock_name/post (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -mock_names=Service=PostServiceMock -package mocks -typed -destination mocks/post_service.go -self_package go.uber.org/mock/mockgen/internal/tests/mock_name/mocks go.uber.org/mock/mockgen/internal/tests/mock_name/post Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	post "go.uber.org/mock/mockgen/internal/tests/mock_name/post"
	user "go.uber.org/mock/mockgen/internal/tests/mock_name/user"
)

// PostServiceMock is a mock of Service interface.
type PostServiceMock struct {
	ctrl     *gomock.Controller
	recorder *PostServiceMockMockRecorder
}

// PostServiceMockMockRecorder is the mock recorder for PostServiceMock.
type PostServiceMockMockRecorder struct {
	mock *PostServiceMock
}

// NewPostServiceMock creates a new mock instance.
func NewPostServiceMock(ctrl *gomock.Controller) *PostServiceMock {
	mock := &PostServiceMock{ctrl: ctrl}
	mock.recorder = &PostServiceMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PostServiceMock) EXPECT() *PostServiceMockMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *PostServiceMock) Create(arg0, arg1 string, arg2 *user.User) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *PostServiceMockMockRecorder) Create(arg0, arg1, arg2 any) *PostServiceMockCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PostServiceMock)(nil).Create), arg0, arg1, arg2)
	return &PostServiceMockCreateCall{Call: call}
}

// PostServiceMockCreateCall wrap *gomock.Call
type PostServiceMockCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PostServiceMockCreateCall) Return(arg0 *post.Post, arg1 error) *PostServiceMockCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PostServiceMockCreateCall) Do(f func(string, string, *user.User) (*post.Post, error)) *PostServiceMockCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PostServiceMockCreateCall) DoAndReturn(f func(string, string, *user.User) (*post.Post, error)) *PostServiceMockCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
